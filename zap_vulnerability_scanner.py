import time
import requests
import json

# Configuración de la API de OWASP ZAP
ZAP_API_KEY = 'tu_api_key'  # Si no usas API Key, deja esto como ''
ZAP_BASE_URL = 'http://localhost:8080'
TARGET_URL = 'http://webobjetivo.com'

def iniciar_escaneo(target_url):
    params = {'url': target_url}
    if ZAP_API_KEY:
        params['apikey'] = ZAP_API_KEY
    response = requests.get(f'{ZAP_BASE_URL}/JSON/ascan/action/scan/', params=params)
    return response.json().get('scan')

def estado_escaneo(scan_id):
    params = {'scanId': scan_id}
    if ZAP_API_KEY:
        params['apikey'] = ZAP_API_KEY
    response = requests.get(f'{ZAP_BASE_URL}/JSON/ascan/view/status/', params=params)
    return response.json().get('status')

def obtener_resultados():
    params = {'baseurl': TARGET_URL}
    if ZAP_API_KEY:
        params['apikey'] = ZAP_API_KEY
    response = requests.get(f'{ZAP_BASE_URL}/JSON/core/view/alerts/', params=params)
    return response.json().get('alerts')

# Iniciar el escaneo
scan_id = iniciar_escaneo(TARGET_URL)
print(f'Escaneo iniciado con ID: {scan_id}')

# Esperar a que el escaneo termine
while True:
    status = estado_escaneo(scan_id)
    print(f'Estado del escaneo: {status}%')
    if status == '100':
        break
    time.sleep(10)

# Obtener y mostrar los resultados
resultados = obtener_resultados()
for alerta in resultados:
    print(f"Vulnerabilidad: {alerta['alert']}")
    print(f"Descripción: {alerta['description']}")
    print(f"Solución: {alerta['solution']}")
    print('---')

# Generar reporte en formato JSON
with open('reporte_vulnerabilidades.json', 'w') as file:
    json.dump(resultados, file, indent=4)

print('Reporte generado: reporte_vulnerabilidades.json')
